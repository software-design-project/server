package controllers

import (
	"net/http"

	"github.com/gorilla/sessions"

	. "../log"
)

/*
 *definition in github.com/gorilla/sessions: 
 *type Session struct {
 *    // The ID of the session, generated by stores. It should not be used for
 *    // user data.
 *    ID  string
 *    // Values contains the user-data for the session.
 *    Values  map[interface{}]interface{} <--
 *    Options *Options <--
 *    IsNew   bool
 *    // contains filtered or unexported fields
 *}
 *type Options struct {
 *    Path   string
 *    Domain string
 *    // MaxAge=0 means no Max-Age attribute specified and the cookie will be
 *    // deleted after the browser session ends.
 *    // MaxAge<0 means delete cookie immediately. <--
 *    // MaxAge>0 means Max-Age attribute present and given in seconds.
 *    MaxAge   int
 *    Secure   bool
 *    HttpOnly bool
 *}
*/

// session store
var store = sessions.NewCookieStore([]byte("ABTicket-session"))

func SessionGet(w http.ResponseWriter, r *http.Request, name string) (map[interface{}]interface{}, bool) {
	s, err := store.Get(r, name)
	var res map[interface{}]interface{}
	if err != nil {
		Log.Error("get session failed: ", err)
		return res, false
	}
	return s.Values, true
}

func SessionSet(w http.ResponseWriter, r *http.Request, name string, data map[interface{}]interface{}) bool {
	s, err := store.Get(r, name)
	if err != nil {
		Log.Error("set session, get session failed: ", err)
		return false
	}
	s.Values = data
	err = s.Save(r, w)
	if err != nil {
		Log.Error("set session, save session failed: ", err)
		return false
	}
	return true
}

func SessionDel(w http.ResponseWriter, r *http.Request, name string) bool {
	s, err := store.Get(r, name)
	if err != nil {
		Log.Error("delete session failed: ", err)
		return false
	}
	// 设为负数会自动删除
	s.Options.MaxAge = -1;
	err = s.Save(r, w)
	if err != nil {
		Log.Error("set session failed: ", err)
		return false
	}
	return true
}

